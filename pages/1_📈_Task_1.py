import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder  

st.set_page_config(page_title="Task 1", page_icon="üìà")

st.markdown("# Task 1. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å–∫–≤–∞–∂–∏–Ω –ø–æ –Ω–∞–±–æ—Ä—É –∫—Ä–∏–≤—ã—Ö –ì–ò–° –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤–æ–≥–æ –ø–ª–∞—Å—Ç–∞.")

# Use image
st.markdown('## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è GGKP –ø–æ —Å–∫–≤–∞–∂–∏–Ω–∞–º')
st.image('diff_GGKP.png')


st.markdown('## –ú–µ—Ç–æ–¥ "–ª–æ–∫—Ç—è" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
st.image('elbow.png')


st.write(
    """ –î–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –º—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –∞–Ω—Å–∞–º–±–ª–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä–∞.

–ú—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:
1. K-mean;
2. Gausinn Mixture Model;
3. Agglomerative Clustering."""
)

# Read the DataFrame from the CSV file
agg_data = pd.read_csv('agg_data.csv')

st.markdown('## –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞')
# Use agg_data as needed




AgGrid(agg_data, height=400)



st.markdown('## –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')

import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('combined.csv')

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
clusters_dict3 = {cluster: [] for cluster in agg_data['Cluster_agg'].unique()}

# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –≤ agg_data
for _, row in agg_data.iterrows():
    well = row['WELL']
    cluster = row['Cluster_agg']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è DEPT –∏ GGKP –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã –∏–∑ df
    well_data = df[df['WELL'] == well]
    well_dept_list = well_data['DEPT'].tolist()
    well_ggkp_list = well_data['GGKP'].tolist()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∫–≤–∞–∂–∏–Ω—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è DEPT –∏ GGKP
    well_dict = {
        'DEPT': well_dept_list,
        'GGKP': well_ggkp_list
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∫–≤–∞–∂–∏–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
    clusters_dict3[cluster].append({well: well_dict})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
def calculate_centroid(wells_data):
    all_depts = np.concatenate([list(data['DEPT']) for well_dict in wells_data for data in well_dict.values()])
    return np.mean(all_depts)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–¥–≤–∏–≥–∞ DEPT –∫ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞
def align_to_centroid(well_data, centroid_dept_value):
    dept_diff = np.mean(well_data['DEPT']) - centroid_dept_value
    well_data['DEPT'] = [dept - dept_diff for dept in well_data['DEPT']]
    return well_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
def calculate_centroid(wells_data):
    all_depts = []
    all_ggkps = []
    for well_dict in wells_data:
        for data in well_dict.values():
            all_depts.extend(data['DEPT'])
            all_ggkps.extend(data['GGKP'])
    centroid_well = min(wells_data, key=lambda wd: np.abs(np.mean(list(wd.values())[0]['DEPT']) - np.mean(all_depts)))
    well_name = list(centroid_well.keys())[0]
    centroid_well_data = list(centroid_well.values())[0]
    return {
        'WELL': well_name,
        'DEPT': centroid_well_data['DEPT'],
        'GGKP': centroid_well_data['GGKP']
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–¥–≤–∏–≥–∞ DEPT –∫ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞
def align_to_centroid(well_data, centroid_dept_value):
    dept_diff = np.mean(well_data['DEPT']) - centroid_dept_value
    well_data['DEPT'] = [dept - dept_diff for dept in well_data['DEPT']]
    return well_data

# –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
centroids = {cluster: calculate_centroid(wells) for cluster, wells in clusters_dict3.items()}

# –°–æ–∑–¥–∞–µ–º —Å—É–±–ø–ª–æ—Ç—ã
num_clusters = len(clusters_dict3)
fig, axes = plt.subplots(num_clusters, 1, figsize=(7, num_clusters * 12), sharey='row')
if num_clusters == 1:
    axes = [axes]

# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É –∏ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
for ax, (cluster, wells_data) in zip(axes, clusters_dict3.items()):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    centroid = centroids[cluster]
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DEPT –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞
    centroid_dept_value = np.mean(centroid['DEPT'])
    
    for well_dict in wells_data:
        for well, data in well_dict.items():
            # –°–¥–≤–∏–≥–∞–µ–º DEPT —Å–∫–≤–∞–∂–∏–Ω—ã –∫ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É
            aligned_data = align_to_centroid(data, centroid_dept_value)            
            # –†–∏—Å—É–µ–º –∫—Ä–∏–≤—É—é GGKP —Å–∫–≤–∞–∂–∏–Ω—ã
            ax.plot(aligned_data['GGKP'], aligned_data['DEPT'], label=well, color='gray', alpha=0.3)

    # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –∫—Ä–∞—Å–Ω—ã–º –∂–∏—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    ax.plot(centroid['GGKP'], centroid['DEPT'], 'r-', linewidth=2, label=f"Centroid: {centroid['WELL']}")

    ax.set_title(f'Cluster {cluster}')
    ax.invert_yaxis()  # –î–ª—è –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ã—á–Ω–æ –æ—Å—å Y –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    ax.set_xlabel('GGKP')
    ax.set_ylabel('DEPT')
    ax.legend()

# Display the plot using Streamlit
st.pyplot(fig)